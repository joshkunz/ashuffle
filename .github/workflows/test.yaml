name: Test
on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
    tags:
      - v*
  schedule:
    - cron: 6 22 * * FRI

jobs:
  check-format:
    name: Check Format
    runs-on: ubuntu-latest
    steps:
      - name: Clone
        uses: actions/checkout@v4
      - name: Check
        run: scripts/github/check-format
  check-lint:
    name: Check Lint
    runs-on: ubuntu-latest
    steps:
      - name: Clone
        uses: actions/checkout@v4
      - name: Lint
        run: scripts/github/lint
  unit-test:
    strategy:
      matrix:
        sanitizer: ["none", "asan"]
        include:
          - sanitizer: asan
            name_suffix: " (ASAN)"
    name: Unit Test${{ matrix.name_suffix }}
    runs-on: ubuntu-latest
    needs: [check-format, check-lint]
    steps:
      - name: Clone
        uses: actions/checkout@v4
      - name: Unit Test
        env:
          SANITIZER: ${{ matrix.sanitizer }}
        run: scripts/github/unit-test
  integration-test:
    strategy:
      matrix:
        target:
          - name: "Latest"
            libmpdclient_version: "latest"
            mpd_version: "latest"
          - name: "Bionic"
            libmpdclient_version: "2.11"
            mpd_version: "0.20.18"
          - name: "Focal"
            libmpdclient_version: "2.18"
            mpd_version: "0.21.20"
          - name: "Impish"
            libmpdclient_version: "2.19"
            mpd_version: "0.22.6"
        test_group:
          - name: "Short"
            args: "-short"
          - name: "Memory (Massive)"
            args: "-run 'TestMaxMemoryUsage/massive'"
          - name: "Memory (Worst Case)"
            args: "-run 'TestMaxMemoryUsage/worst.case'"
          - name: "Startup (From MPD)"
            args: "-run 'TestFastStartup/from.mpd'"
          - name: "Startup (From File)"
            args: "-run 'TestFastStartup/from.file'"
          - name: "Startup (From File, With Filter)"
            args: "-run 'TestFastStartup/from.file,.with.filter'"
          - name: "Startup (From MPD, Group By)"
            args: "-run 'TestFastStartup/from.mpd,.group-by'"
    name: "Integration Test (${{ matrix.target.name }}): ${{ matrix.test_group.name }}"
    runs-on: ubuntu-latest
    needs: [unit-test]
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      # This whole little song and dance is pretty annoying. Ideally I could
      # just use ./scripts/run-integration and be done with it, but to get
      # caching, I need to use the build-push-action. This is because gha
      # only exposes the necessary values to the node runtime, not via a script
      # consumable mechanism. There is a bug out for this, so hopefully this
      # can all be deleted eventually: https://github.com/actions/runner/issues/3046
      #
      # We still need to run "build-test-image" here to do the little tarring
      # step. Maybe I can delete that, and just go straight to build-push-action?
      - name: Stage Build
        id: stage
        env:
          MPD_VERSION: ${{ matrix.target.mpd_version }}
          LIBMPDCLIENT_VERSION: ${{ matrix.target.libmpdclient_version }}
        run: |
          git submodule update --init --recursive
          # produces the outputs used in the subseqent step
          scripts/github/resolve-versions
      - name: Build Integration Test Container
        uses: docker/build-push-action@v5
        with:
          context: .
          file: t/docker/Dockerfile.ubuntu
          build-args: |
            LIBMPDCLIENT_VERSION=${{ steps.stage.outputs.LIBMPDCLIENT_VERSION }}
            MPD_VERSION=${{ steps.stage.outputs.MPD_VERSION }}
          tags: test/ashuffle:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true
      - name: Run Test
        run: |
          scripts/run-integration \
          --no_build_use_image=test/ashuffle:latest \
          --no_tty ${{ matrix.test_group.args }}
  release-build:
    name: Release Build
    runs-on: ubuntu-latest
    needs: [integration-test]
    steps:
      - name: Clone
        uses: actions/checkout@v4
      - name: Release Build
        run: scripts/github/release
      - name: Deploy
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_TAG: ${{ github.ref }}
        run: |
          # Cut off the "refs/tags" prefix.
          tag="${RELEASE_TAG#"refs/tags/"}"
          gh release create \
            --draft \
            --title "${tag}" \
            --generate-notes \
            "${tag}" \
            release/ashuffle.x86_64-linux-gnu \
            release/ashuffle.aarch64-linux-gnu \
            release/ashuffle.armv7h-linux-gnueabihf \
            release/ashuffle.armv6h-linux-gnueabihf
